to run-once
	init-jlogo
	init-ulogo
	print "|monitoring packets...|
	loop [ receive-packet wait 10 ]
end

to init-ulogo
	stopvm
	ul-blind-run [ul-power]
end

to init-jlogo
	init-time
	make "uTime []
	make "polarized []
	make "unpolarized []	
end

to process-data-packet
	if(:type  = 10 )
	[
		
		let [time 10 * ( nth 2 (packet-words :pack)) + ( nth 3 (packet-words :pack) ) / 1000]
		let[ i 0 ]
		repeat 6 [
			ifelse ((count :uTime ) = 0) 
			[make "uTime [ 0 ] ]	
			[make "uTime (se :uTime ( :time ) + 10 * :i ) ]
			let [i (:i + 1)]
		]
	
		make "polarized se :polarized last :p10-word00
		make "unpolarized se :unpolarized last :p10-word01
	
		make "polarized se :polarized last :p10-word02
		make "unpolarized se :unpolarized last :p10-word03
	
		make "polarized se :polarized last :p10-word04
		make "unpolarized se :unpolarized last :p10-word05
	
		make "polarized se :polarized last :p10-word06
		make "unpolarized se :unpolarized last :p10-word07
	
		make "polarized se :polarized last :p10-word08
		make "unpolarized se :unpolarized last :p10-word09
	
		make "polarized se :polarized last :p10-word10
		make "unpolarized se :unpolarized last :p10-word11
		

		plot-light
	]
end


to plot-light
	x-data "|a| :uTime
	y-data "|b| :unpolarized		
	setup-screen
	box
	tmlabel now 1.1 0.5
	
	title "|Luminosity vs Time|
	xlabel "|Time|
	ylabel "|Luminosity|	
	
	limits 0 (last :uTime) 0 500
	xaxis 4 20 2 true
	yaxis 4 20 2 true
	
	blue		
	aspect 1 2
	ptype 0
	ltype 0
	points
	connect
	redraw 
	
	y-data "|c| :polarized
	red	
	ptype 0
	ltype 0
	points
	connect
	redraw 
	
	
	wait 1
	display-plot tile 1 2 1 1 

end
to get-data
	compile
	init-time
	print "|retrieving packets...|
	stopvm
	ul-init
	init-jlogo
	ul-run [read-next-init]
	wait 10
	loop [
		ul-run [read-next-packet]
		receive-packet
	]
end
