global [ packetsize, index, i, sd_index, sd_low, sd_high ]

to ul-power
	init-onboardleds
	redon
	wait 10
	redoff
	ul-init
	ul-go
end

to ul-init
	yellowon
	sd-clear-buffer
	setpacketsize 36
	SD-Find-Open
	init-sd
	wait 10
	yellowoff
end

to ul-go
	greenon
	wait 10 
	greenoff
	loop 
	[
		setindex ( 512 / packetsize )
		seti 0
		repeat index [
			collect-data
			seti i + 1
		]
		fill-sd-block
		
	]
end

to read-IR-sensor
	output readADC 0
end

to read-Optical-sensor
	output readADC 1
end

to collect-cycle :wait-time
	packet-word read-IR-sensor
	packet-word read-Optical-sensor
	blueon 
	wait 1
	blueoff
	wait :wait-time
end


to collect-data
	init-packet 10
	repeat 6 [ collect-cycle 10 ] 
	add-checksum
	write-packet-sd
end


to write-packet-sd
	setn 0
	repeat packetsize [
		writeb ($1500 + n ) (readb ($1fc0 + n))
		setn n + 1
	]
	SD-Log-Chunk $1500 packetsize
end

to fill-sd-block
	SD-Log-Chunk $1500 (512 - packetsize)
end

to read-next-init
	setsd_high 0
	setsd_low 0
	setsd_index 0
end

to read-next-packet
	read-nth-packet sd_index
	increment_sd_index
	prs "_____
	print sd_high
	print sd_low
	print sd_index
	prs "_____
end


to increment_sd_index
	ifelse (sd_index = ( 512 / packetsize) )
	[
		setsd_index 0
		setsd_low sd_low + 1
		increment_sd_block
	]
	[
		setsd_index sd_index + 1
	]
	
end

to increment_sd_block
	ifelse (sd_low = $FFFF) 
	[
		setsd_low 0
		setsd_high sd_high + 1
	]	
	[
		setsd_low sd_low + 1
	]
	read-sd sd_high sd_low	
		
end


to read-nth-packet :nread
	setm 0
	repeat packetsize [
		writeb ( $1fc0 + m ) (readb (SD_Buffer + m + ( packetsize * :nread ) ) )
		print (readb (SD_Buffer + m + ( packetsize * :nread ) ) )
		setm m + 1
		mwait 100
	]
	
end

to read-packets :n
	repeat :n [ read-next-packet]
end
