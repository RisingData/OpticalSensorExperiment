global [ packetsize, sd_index, sd_low, sd_high, vbyte, rbyte ]

to ul-power
	init-onboardleds
	redon
	wait 10
	redoff
	ul-init
	ul-go
end

to ul-init
	yellowon
	sd-clear-buffer
	setpacketsize 36
	init-sd
	SD-Find-Open
	wait 10
	yellowoff
end

to ul-go
	greenon
	wait 10 
	greenoff
	wait 10
	loop 
	[
			
		repeat 14 [
			collect-data
			wait 50
		]
		fill-sd-block
		
	]
end

to read-IR-sensor
	output readADC 0
end

to read-Optical-sensor
	output readADC 1
end

to read-sensors
	packet-word read-IR-sensor
	packet-word read-Optical-sensor
	blueon 
	wait 1
	blueoff
	wait 10
end


to collect-data
	init-packet 10
	repeat 6 [ read-sensors ] 
	add-checksum
	write-packet-sd
end

to read-data
	read-next-init
	read-packets 
end


;;;;;;;;;;;;;;;;;;;;;;;; THE HOOD ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to write-packet-sd
	setn 0
	repeat packetsize [
		writeb ($1500 + n ) (readb ($1fc0 + n))
		setn n + 1
	]
	SD-Log-Chunk $1500 packetsize
	redon 
	blueon
	wait 5
	redoff
	blueoff
end

to fill-sd-block	
	SD-Log-Chunk $1500 (512 - packetsize)
	redon
	greenon
	wait 5
	redoff
	greenoff
end

to read-next-init
	setsd_high 0
	setsd_low 0
	setsd_index 0
	read-sd sd_high sd_low	
end

to read-next-packet
	read-nth-packet sd_index
	increment_sd_index
end


to increment_sd_index
	ifelse (sd_index = ( 512 / packetsize) )
	[
		setsd_index 0
		setsd_low sd_low + 1
		increment_sd_block
	]
	[
		setsd_index sd_index + 1
	]
	
end

to increment_sd_block
	ifelse (sd_low = $FFFF) 
	[
		setsd_low 0
		setsd_high sd_high + 1
	]	
	[
		setsd_low sd_low + 1
	]
	read-sd sd_high sd_low	
		
end


to read-nth-packet :nread
	setm 0
	repeat packetsize + 1 [
		writeb ( $1f80 + m ) (readb (SD_Buffer + m + ( packetsize * :nread ) ) )
		setm m + 1
		mwait 150
	]
	
end

to read-packets 
	init-sd
	setvbyte 32
	read-next-init
	loop [ 
		setrbyte readb (SD_Buffer + ( packetsize * sd_index ))
		print rbyte
		print vbyte		
		;if not (rbyte = vbyte) [ redon wait 1 redoff wait 1 redon wait 1 redoff stop ]		
		;read-next-packet 			
		;greenon 
		;wait 10 
		;greenoff
		;wait 10		
		
		]
	]
end



