;spi v.4

constants [                         ; Register ID's
   [ UCB0TXBUF $6F ]                   ; Transmit Buffer
   [ UCB0RXBUF $6E ]                   ; Receive Buffer
   [ UCB0STAT $6D ]                    ; Status Register
   [ UCB0BR1 $6B ][ UCB0BR0 $6A ]      ; Baud Rate Control
   [ UCB0CTL1 $69 ][ UCB0CTL0 $68 ]    ; Control Registers
   [ IFG2 $03 ]
 
   [ bit0 $01 ][ bit1 $02 ][ bit2 $04 ][ bit3 $08 ]
   [ bit4 $10 ][ bit5 $20 ][ bit6 $40 ][ bit7 $80 ]

   [ p3sel $1B ][ channel1 $02 ]       ; GPIO Pins related to
   [ channel2 $04 ][ channel3 $08 ]    ;   SPI communication
]

; Individual Bits in UCB0CTL0

constants [
   [ UCSYNC $01 ]                ; Synchronous Mode Enable (1 = Sync, 0 = Async)
   [ UCMODE0 $02 ][ UCMODE1 $04 ]; Mode Select (00 for SPI)
   [ UCMST $08 ]                 ; Master Select (1 = Master, 0 =  Slave)
   [ UC7BIT $10 ]                ; Character Length (0 = 8bit, 1 = 7bit)
   [ UCMSB $20 ]                 ; MSB Select First (1 = MSB, 0 = LSB)
   [ UCCKPL $40 ]                ; Clock Polarity (Low = 0, High = 1)
   [ UCCKPH $80 ]                ; Clock Phase (Latch 1st = 0, Latch 2nd = 1)
]

; Individual Bits in UCB0CTl1

constants [
   [ UCSWRST $01 ]                ; Software Reset (reset/held = 1, free = 0)
   [ UCSSEL0 $40 ][ UCSSEL1 $80 ] ; Clock Source Select (10 for Internal Clock)
]

; Individual Bits in UCB0STAT

constants [
   [ UCBUSY $01 ]                 ; USCI Busy (0 = Not Busy, 1 = Busy)
   [ UCOE $20 ]                   ; Overflow Error Flag
   [ UCFE $40 ]                   ; Fragment Error Flag
   [ UCLISTEN $80 ]               ; Listen Enable
]

; Individual Bits in IFG2

constants [
   [ UCB0RXIFG $04 ][ UCB0TXIFG $08 ] ; TX and RX Interupt Flags
]

to init-spi

   bset UCB0CTL1 UCSWRST      ; Disable USCI
                              
   bset p3sel channel1        ; Disable GPIO functionality
   bset p3sel channel2
   bset p3sel channel3

   bset UCB0CTL0 UCSYNC       ; Setting Control Registers to Common Settings
   bclr UCB0CTL0 UCMODE0
   bclr UCB0CTL0 UCMODE1
   bset UCB0CTL0 UCMST
   bclr UCB0CTL0 UC7BIT
   bset UCB0CTL0 UCMSB
   bclr UCB0CTL0 UCCKPL
   bset UCB0CTL0 UCCKPH

   bset UCB0CTL1 UCSSEL1
   bclr UCB0CTL1 UCSSEL0

   writeb ucb0br0 0
   writeb ucb0br1 128

   bclr UCB0CTL1 UCSWRST      ; Re-Enable USCI 

end

to spi-TXRX :x

   waituntil [ (btst ifg2 ucb0txifg) = 1 ]     ; Wait until TX is Available
   writeb ucb0txbuf :x                         ; Write Command
   waituntil [ (btst ifg2 ucb0rxifg) = 1 ]     ; Wait until RX is Available
   output read UCB0RXBUF                       ; Read Response

end

to spi-TX :x

   waituntil [ (btst ifg2 ucb0txifg) = 1 ]     ; Wait until TX is Available
   writeb ucb0txbuf :x                         ; Write Command
   waituntil [ (btst ifg2 ucb0rxifg) = 1 ]     ; Wait until RX is Available
   ignore read ucb0rxbuf                       ; Read and Ignore Response

end

to spi-RX

   waituntil [ (btst ifg2 ucb0txifg) = 1 ]
   writeb ucb0txbuf 0
   waituntil [ (btst ifg2 ucb0rxifg) = 1 ]
   output read UCB0RXBUF

end 

to spi-RX2

   waituntil [ (btst ifg2 ucb0txifg) = 1 ]
   writeb ucb0txbuf 255
   waituntil [ (btst ifg2 ucb0rxifg) = 1 ]
   output read UCB0RXBUF

end 
